/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.start;

import java.awt.Color;
import java.util.List;

import commands.*;
import editor.*;
import logNrecord.MementoState;
import logNrecord.RecorderImpl;

/**
 *
 * @author Mael
 */
public class EditorACOGUI extends javax.swing.JFrame {

	private EngineImpl engine;
	private UI ui;
	private RecorderImpl record;

	private static final long serialVersionUID = 1L;
	/**
	 * Creates new form EditorACOGUI
	 */
	public EditorACOGUI() {
		initComponents();
		engine = new EngineImpl();
		ui = new UI();
		record = new RecorderImpl();
		undoButton.setEnabled(false);
		redoButton.setEnabled(false);
		selectButton.setEnabled(false);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        insertButton = new javax.swing.JButton();
        selectButton = new javax.swing.JButton();
        cutButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        pasteButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        undoButton = new javax.swing.JButton();
        redoButton = new javax.swing.JButton();
        recordToggle = new javax.swing.JToggleButton();
        deleteButton = new javax.swing.JButton();
        bufferLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        bufferContent = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        selectionContent = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        clipboardContent = new javax.swing.JTextArea();
        selectionLabel = new javax.swing.JLabel();
        clipboardLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EditorACO");

        text.setColumns(20);
        text.setRows(5);
        jScrollPane1.setViewportView(text);

        insertButton.setText("Insert");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        selectButton.setText("Select");
        selectButton.setToolTipText("Use the mouse to select text in the buffer up above");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        cutButton.setText("Cut");
        cutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutButtonActionPerformed(evt);
            }
        });

        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        pasteButton.setText("Paste");
        pasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteButtonActionPerformed(evt);
            }
        });

        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        undoButton.setText("Undo");
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });

        redoButton.setText("Redo");
        redoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoButtonActionPerformed(evt);
            }
        });

        recordToggle.setText("Record");
        recordToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordToggleActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(insertButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cutButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(copyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pasteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recordToggle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(undoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(redoButton)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insertButton)
                    .addComponent(selectButton)
                    .addComponent(cutButton)
                    .addComponent(copyButton)
                    .addComponent(pasteButton)
                    .addComponent(playButton)
                    .addComponent(undoButton)
                    .addComponent(redoButton)
                    .addComponent(recordToggle)
                    .addComponent(deleteButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bufferLabel.setText("Buffer");

        bufferContent.setEditable(false);
        bufferContent.setColumns(20);
        bufferContent.setRows(5);
        bufferContent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bufferContentMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(bufferContent);

        selectionContent.setEditable(false);
        selectionContent.setColumns(20);
        selectionContent.setRows(5);
        jScrollPane3.setViewportView(selectionContent);

        clipboardContent.setEditable(false);
        clipboardContent.setColumns(20);
        clipboardContent.setRows(5);
        jScrollPane4.setViewportView(clipboardContent);

        selectionLabel.setText("Selection");

        clipboardLabel.setText("Clipboard");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bufferLabel)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addComponent(selectionLabel)
                            .addComponent(clipboardLabel)
                            .addComponent(jScrollPane3))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bufferLabel)
                    .addComponent(selectionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clipboardLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
		record.recordCommand(ui.executeCommand(new Insert(engine, this)), text.getText(), engine);
		bufferContent.setText(engine.getBuffer());
		selectionContent.setText(engine.getSelection());
		text.setText("");
		addToLog();
	}//GEN-LAST:event_insertButtonActionPerformed

	private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
		CommandInterface c;

		List<CommandInterface> cmds = record.getCmdList();
		for(int i = 0;i < cmds.size(); i++){
			c = cmds.get(i);
			ui.executeCommand(c);
		}
		bufferContent.setText(engine.getBuffer());
		selectionContent.setText(engine.getSelection());
		clipboardContent.setText(engine.getClipboard());
		addToLog();
	}//GEN-LAST:event_playButtonActionPerformed

	private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
		Select s = new Select(engine, this);
		record.recordCommand(ui.executeCommand(s), "", engine);
		selectionContent.setText(engine.getSelection());
		
/*		String numberString="";
		try
		{
			String[] arguments = text.getText().split("\\s+");
			numberString = arguments[0];
			int start  = Integer.parseInt(numberString);
			numberString = arguments[1];
			int stop  = Integer.parseInt(numberString);
			((Select) ui.getCommand("select")).setStart(start);
			((Select) ui.getCommand("select")).setStop(stop);
			record.recordCommand(ui.executeCommand("select"), text.getText(), engine);
			selectionContent.setText(engine.getSelection());
			text.setText("");
		}
		catch (Exception e)
		{
			System.out.println("Invalid number: " + numberString);
		}
*/
	}//GEN-LAST:event_selectButtonActionPerformed

	private void cutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutButtonActionPerformed
		record.recordCommand(ui.executeCommand((new Cut(engine ,this))), "", engine);
		bufferContent.setText(engine.getBuffer());
		clipboardContent.setText(engine.getClipboard());
		addToLog();
	}//GEN-LAST:event_cutButtonActionPerformed

	private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
		record.recordCommand(ui.executeCommand((new Copy(engine, this))), "", engine);
		clipboardContent.setText(engine.getClipboard());
	}//GEN-LAST:event_copyButtonActionPerformed

	private void pasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteButtonActionPerformed
		record.recordCommand(ui.executeCommand((new Paste(engine, this))), "", engine);
		bufferContent.setText(engine.getBuffer());
		addToLog();
	}//GEN-LAST:event_pasteButtonActionPerformed

	private void recordToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordToggleActionPerformed
		if(recordToggle.isSelected()){
			record.startRecording();
			recordToggle.setForeground(Color.RED);
		}else{
			record.stopRecording();
			recordToggle.setForeground(Color.BLACK);
		}
	}//GEN-LAST:event_recordToggleActionPerformed

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
		record.recordCommand(ui.executeCommand((new Delete(engine, this))), "", engine);
		bufferContent.setText(engine.getBuffer());
		selectionContent.setText(engine.getSelection());
		addToLog();
	}//GEN-LAST:event_deleteButtonActionPerformed

	private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
		if(engine.undoAvailable()){
			ui.executeCommand((new Undo(engine, this)));
			redoButton.setEnabled(true);
			if(!engine.undoAvailable()){
				undoButton.setEnabled(false);
			}
			bufferContent.setText(engine.getBuffer());
		}else
			System.out.println("Undo Unavailable");
	}//GEN-LAST:event_undoButtonActionPerformed

	private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoButtonActionPerformed
		if(engine.redoAvailable()){
			ui.executeCommand((new Redo(engine, this)));
			undoButton.setEnabled(true);
			if(!engine.redoAvailable()){
				redoButton.setEnabled(false);
			}
			bufferContent.setText(engine.getBuffer());
		}else
			System.out.println("Redo Unavailable");
	}//GEN-LAST:event_redoButtonActionPerformed

    private void bufferContentMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bufferContentMouseReleased
		Select s = new Select(engine, this);
		record.recordCommand(ui.executeCommand(s), "", engine);
		selectionContent.setText(engine.getSelection());
    }//GEN-LAST:event_bufferContentMouseReleased

	private void addToLog() {
		engine.getLog().recordState(new MementoState(engine.getBuffer(), engine.getSelectionStart(), engine.getSelectionEnd()));
	}
	
	public String getText(){
		return text.getText();
	}
	
	public int getStartSelection(){
		return engine.getSelectionStart();
	}
	
	public int getStopSelection(){
		return engine.getSelectionEnd();
	}
	
	public void enableUndoButton(){
		undoButton.setEnabled(true);
	}
	
	public void disableUndoButton(){
		undoButton.setEnabled(false);
	}
	
	public void enableRedoButton(){
		redoButton.setEnabled(true);
	}
	
	public void disableRedoButton(){
		redoButton.setEnabled(false);
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(EditorACOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(EditorACOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(EditorACOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(EditorACOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new EditorACOGUI().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea bufferContent;
    private javax.swing.JLabel bufferLabel;
    private javax.swing.JTextArea clipboardContent;
    private javax.swing.JLabel clipboardLabel;
    private javax.swing.JButton copyButton;
    private javax.swing.JButton cutButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton insertButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton pasteButton;
    private javax.swing.JButton playButton;
    private javax.swing.JToggleButton recordToggle;
    private javax.swing.JButton redoButton;
    private javax.swing.JButton selectButton;
    private javax.swing.JTextArea selectionContent;
    private javax.swing.JLabel selectionLabel;
    private javax.swing.JTextArea text;
    private javax.swing.JButton undoButton;
    // End of variables declaration//GEN-END:variables
}
