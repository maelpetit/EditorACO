/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.start;

import java.awt.Color;
import java.awt.event.KeyEvent;

import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;

import commands.*;
import editor.*;

/**
 *
 * @author Mael PETIT, Jules PAGET
 */
public class EditorACOGUI extends javax.swing.JFrame implements GUI{

	private EngineImpl engine;
	private Object highlight;

	private static final long serialVersionUID = 1L;
	/**
	 * Creates new form EditorACOGUI
	 */
	public EditorACOGUI() {
		initComponents();
		engine = new EngineImpl();
		undoButton.setEnabled(false);
		redoButton.setEnabled(false);
		selectButton.setEnabled(false);
		highlight = null;
		text.requestFocusInWindow();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        insertButton = new javax.swing.JButton();
        selectButton = new javax.swing.JButton();
        cutButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        pasteButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        undoButton = new javax.swing.JButton();
        redoButton = new javax.swing.JButton();
        recordToggle = new javax.swing.JToggleButton();
        deleteButton = new javax.swing.JButton();
        bufferLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        bufferContent = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        selectionContent = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        clipboardContent = new javax.swing.JTextArea();
        selectionLabel = new javax.swing.JLabel();
        clipboardLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EditorACO");

        text.setColumns(20);
        text.setRows(5);
        text.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(text);

        insertButton.setText("Insert");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        selectButton.setText("Select");
        selectButton.setToolTipText("Use the mouse to select text\nin the buffer up above");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        cutButton.setText("Cut");
        cutButton.setToolTipText("");
        cutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutButtonActionPerformed(evt);
            }
        });

        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        pasteButton.setText("Paste");
        pasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteButtonActionPerformed(evt);
            }
        });

        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        undoButton.setText("Undo");
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });

        redoButton.setText("Redo");
        redoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoButtonActionPerformed(evt);
            }
        });

        recordToggle.setText("Record");
        recordToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordToggleActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(insertButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cutButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(copyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pasteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recordToggle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(undoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(redoButton)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insertButton)
                    .addComponent(selectButton)
                    .addComponent(cutButton)
                    .addComponent(copyButton)
                    .addComponent(pasteButton)
                    .addComponent(playButton)
                    .addComponent(undoButton)
                    .addComponent(redoButton)
                    .addComponent(recordToggle)
                    .addComponent(deleteButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bufferLabel.setText("Buffer");

        bufferContent.setEditable(false);
        bufferContent.setColumns(20);
        bufferContent.setRows(5);
        bufferContent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                bufferContentMouseReleased(evt);
            }
        });
     
        jScrollPane2.setViewportView(bufferContent);

        selectionContent.setEditable(false);
        selectionContent.setColumns(20);
        selectionContent.setRows(5);
        jScrollPane3.setViewportView(selectionContent);

        clipboardContent.setEditable(false);
        clipboardContent.setColumns(20);
        clipboardContent.setRows(5);
        jScrollPane4.setViewportView(clipboardContent);

        selectionLabel.setText("Selection");

        clipboardLabel.setText("Clipboard");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bufferLabel)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addComponent(selectionLabel)
                            .addComponent(clipboardLabel)
                            .addComponent(jScrollPane3))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bufferLabel)
                    .addComponent(selectionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clipboardLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	public javax.swing.JTextArea getBufferTextArea() {
		return bufferContent;
	}
	
	private void updateBuffer(){
		bufferContent.setText(engine.getBuffer());
	}
	private void updateSelection(){
		selectionContent.setText(engine.getSelection());
	}
	private void updateClipboard(){
		clipboardContent.setText(engine.getClipboard());
	}
	
	private void highlight(int start, int stop){
		Highlighter highlighter = bufferContent.getHighlighter();
		HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.PINK);
		try {
			if(highlight == null){
				highlight = highlighter.addHighlight(start, stop, painter );
			}else{
				highlighter.changeHighlight(highlight, start, stop);
			}
		} catch (BadLocationException e) {
			e.printStackTrace();
		}
		
	}
	
	private void updateGUI(){
		enableRedoButton(engine.redoAvailable());
		enableUndoButton(engine.undoAvailable());
		updateBuffer();
		updateClipboard();
		updateSelection();
		highlight(engine.getSelectionStart(), engine.getSelectionEnd());
	}
	
	public void insertAction(){
		new Insert(engine, this).execute();
		updateGUI();
		text.setText("");
	}
	
	private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
		insertAction();
		text.requestFocusInWindow();
	}//GEN-LAST:event_insertButtonActionPerformed
	
	public void playAction(){
		new Play(engine, this).execute();
		updateGUI();
	}
	
	private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
		playAction();
		text.requestFocusInWindow();
	}//GEN-LAST:event_playButtonActionPerformed
	
	public void selectAction(){
		new Select(engine, this).execute();
		updateSelection();
		highlight(engine.getSelectionStart(), engine.getSelectionEnd());
	}
	
	private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
		selectAction();
		text.requestFocusInWindow();
	}//GEN-LAST:event_selectButtonActionPerformed
	
	private void bufferContentMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bufferContentMouseReleased
		selectAction();
		text.requestFocusInWindow();
    }//GEN-LAST:event_bufferContentMouseReleased
	
	public void cutAction(){
		new Cut(engine ,this).execute();
		updateGUI();
	}
	
	private void cutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutButtonActionPerformed
		cutAction();
		text.requestFocusInWindow();
	}//GEN-LAST:event_cutButtonActionPerformed
	
	public void copyAction(){
		new Copy(engine ,this).execute();
		updateGUI();
	}

	private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
		copyAction();
		text.requestFocusInWindow();
	}//GEN-LAST:event_copyButtonActionPerformed
	
	public void pasteAction(){
		new Paste(engine, this).execute();
		updateGUI();
	}

	private void pasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteButtonActionPerformed
		pasteAction();
		text.requestFocusInWindow();
	}//GEN-LAST:event_pasteButtonActionPerformed
	
	public void startRecordingAction(){
		new StartRecording(engine, this).execute();
	}
	
	public void stopRecordingAction(){
		new StopRecording(engine, this).execute();
	}
	
	public boolean eraseRecording(){
		if(!engine.getRecorder().getCmdList().isEmpty()){
			Object[] options = {"Keep","Erase"};
			int keep = JOptionPane.showOptionDialog(this,
					"Erase the last recording ?",
					"Do you wish to keep the last recording/nor erase and start a new one ?",
					JOptionPane.YES_NO_OPTION,
					JOptionPane.QUESTION_MESSAGE,
					null,     //do not use a custom Icon
					options,  //the titles of buttons
					options[0]); //default button title
			if(keep == JOptionPane.NO_OPTION){
				return true;
			}
			return false;
		}
		return false;
	}

	private void recordToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordToggleActionPerformed
		if(recordToggle.isSelected()){
			startRecordingAction();
			recordToggle.setForeground(Color.RED);
		}else{
			stopRecordingAction();
			recordToggle.setForeground(Color.BLACK);
		}
		text.requestFocusInWindow();
	}//GEN-LAST:event_recordToggleActionPerformed
	
	public void deleteAction(){
		new Delete(engine, this).execute();
		updateGUI();
	}

	private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
		deleteAction();
		text.requestFocusInWindow();
	}//GEN-LAST:event_deleteButtonActionPerformed
	
	public void undoAction(){
		new Undo(engine, this).execute();
		updateGUI();
	}

	private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
		undoAction();
		text.requestFocusInWindow();
	}//GEN-LAST:event_undoButtonActionPerformed
	
	public void redoAction(){
		new Redo(engine, this).execute();
		updateGUI();
	}

	private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoButtonActionPerformed
		redoAction();
		text.requestFocusInWindow();
	}//GEN-LAST:event_redoButtonActionPerformed
	
	public void selectAllAction(){
		new SelectAll(engine, this).execute();
		updateGUI();
	}

    private void textKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textKeyPressed
            keyEventHandler(evt);
    }//GEN-LAST:event_textKeyPressed

    
    private void keyEventHandler(KeyEvent evt){
    	if(evt.isAltDown()){
        	switch(evt.getKeyCode()){
        	case KeyEvent.VK_C: copyAction(); break;
        	case KeyEvent.VK_V: pasteAction(); break;
        	case KeyEvent.VK_X: cutAction(); break;
        	case KeyEvent.VK_Z: undoAction(); break;
        	case KeyEvent.VK_Y: redoAction(); break;
        	case KeyEvent.VK_A: selectAllAction(); break;
        	default: /*System.err.println("UNDEFINED key shortcut");*/ break;
        	}
                System.err.println("you pressed ALT + " + String.valueOf(evt.getKeyChar()));
        }else if(evt.getKeyCode() == KeyEvent.VK_CONTROL){
        	insertAction();
        	System.err.println("you pressed CONTROL");
        }else{
        	System.err.println("Not a command key");
        }
    }
	
	public String getText(){
		return text.getText();
	}
	
	public int getGUIStartSelection(){
		return bufferContent.getSelectionStart();
	}
	
	public int getGUIStopSelection(){
		return bufferContent.getSelectionEnd();
	}
	
	private void enableUndoButton(boolean enable){
		undoButton.setEnabled(enable);
	}
	
	private void enableRedoButton(boolean enable){
		redoButton.setEnabled(enable);
	}
	

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(EditorACOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(EditorACOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(EditorACOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(EditorACOGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new EditorACOGUI().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea bufferContent;
    private javax.swing.JLabel bufferLabel;
    private javax.swing.JTextArea clipboardContent;
    private javax.swing.JLabel clipboardLabel;
    private javax.swing.JButton copyButton;
    private javax.swing.JButton cutButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton insertButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton pasteButton;
    private javax.swing.JButton playButton;
    private javax.swing.JToggleButton recordToggle;
    private javax.swing.JButton redoButton;
    private javax.swing.JButton selectButton;
    private javax.swing.JTextArea selectionContent;
    private javax.swing.JLabel selectionLabel;
    private javax.swing.JTextArea text;
    private javax.swing.JButton undoButton;
    // End of variables declaration//GEN-END:variables
}
